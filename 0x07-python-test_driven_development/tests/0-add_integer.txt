========================
How to Use 0-add_integer
========================

add_integer is a simple function to add integers. It fails if either
argument is not a float or integer.

Numbers
=======
``add_integer`` returns the sum of two numbers. This is equivalent to
using the `+` operator.

::

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

It also works with floating values.

::

	>>> add_integer(2.0, 3)
	5
	>>> add_integer(2, 3.0)
	5
	>>> add_integer(2.0, 3.0)
	5

What if we give it only one argument?

::

	>>> add_integer(2)
	100
	>>> add_integer(2.0)
	100

Non-Numbers
===========
``add_integer`` kinda hates everyone else who doesn't identify as a
number.

One frenemy is the string.

::

	>>> add_integer('a', 3)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add_integer(2, 'b')
	Traceback (most recent call last):
	TypeError: b must be an integer

Lists, Tuples, Dicts, are all not welcome

::

	>>> add_integer([], 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer((), 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer({}, 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

None 'types' don't even know where they belong

::

	>>> add_integer(None, 4)
	Traceback (most recent call last):
	TypeError: a must be an integer

What if there is no argument

::

	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'
